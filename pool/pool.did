type MemberCycles = record {
  block : nat;
  pending : nat;
  remaining : nat;
};
type MemberCyclesResult = variant {
  Ok : opt MemberCycles;
  Err : text;
};
type MemberReward = record {
  timestamp : nat64;
  cycles_burnt : nat;
  bob_reward : nat;
  bob_block_index : opt nat64;
};
type PoolRunningState = variant {
  Running;
  Stopping;
  Stopped;
};
type PoolState = record {
  miner : opt principal;
  running_state : PoolRunningState;
};
type Result = variant { Ok; Err : text };
service : {
  get_member_cycles : () -> (MemberCyclesResult) query;
  get_member_rewards : () -> (vec MemberReward) query;
  get_pool_state : () -> (PoolState) query;
  join_pool : (nat64) -> (Result);
  pay_member_rewards : () -> (Result);
  set_member_block_cycles : (nat) -> (Result);
  spawn_miner : (opt nat64) -> (Result);
  start : () -> (Result);
  stop : () -> ();
}
